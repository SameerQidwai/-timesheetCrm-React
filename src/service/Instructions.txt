Profit and loss
    1) what to show if amount is ended before fiscal year is ended in type 1
    2) what to show if amount is ended before fiscal year is ended in type 2


//Forcasting count till Whole Financial year budget including Milestone and time base
calculateProjectData = (actualStatement, actualTotal, forecast) =>{
        let { data, fiscalYear } = this.state
        const { billing, type: proType } = this.props
        let startDate = formatDate(billing.startDate)
        let endDate = formatDate(billing.endDate)
        let noOfDays = 0
        let actualDays = 0
        let fiscalDays = 0
        let fiscalActualDays = 0
        let revenuePerDay = 0
        let totalRevenue = 0
        let forecastStatement = {}
        let forecastTotal = {sellTotal: 0, buyTotal: 0}
        let tempEndDate = formatDate(new Date()).add(100, 'years')
        let forecastStartDate = startDate.isBefore(fiscalYear['start'], 'day') ? fiscalYear['start'] : startDate
        let forecastEndDate = endDate.isBefore(fiscalYear['end'], 'day') ? fiscalYear['end'] : endDate
        
        //Testing
       

        for (var iDate = formatDate(startDate); iDate.isSameOrBefore(endDate); iDate.add(1, 'days')) {
            if (iDate.isoWeekday() !== 6 && iDate.isoWeekday() !== 7){
                let key = formatDate(iDate).format('MMM YY')

                if (iDate.isBefore(moment(), 'month')){ //checking if the date belongs to past month
                    actualDays ++ // Number of ACTUAL working days
                }
                
                if ( iDate.isSameOrAfter(forecastStartDate, 'day') && // finding Fiscal Months
                    iDate.isSameOrBefore(forecastEndDate), 'day' ) {
                    if (iDate.isSameOrAfter(moment(), 'month')){ 
                        //FORCASTING Future predictions
                        
                        forecast.forEach((el, index) =>{
                          
                            if ( iDate.isBetween(formatDate(el.con_startDate), formatDate(el.con_endDate) ??  tempEndDate, 'day', '[]') &&
                            iDate.isBetween(formatDate(el.res_startDate), formatDate(el.res_endDate)??  tempEndDate , 'day', '[]') ){
                                if (forecastStatement[key]){
                                    forecastStatement[key].monthTotalBuy += el.forecastBuyRateDaily
                                    forecastStatement[key].monthTotalSell += el.forecastSellRateDaily

                                }else{
                                    forecastStatement[key] = {
                                        month: key, 
                                        monthTotalBuy: el.forecastBuyRateDaily, 
                                        monthTotalSell: el.forecastSellRateDaily, 
                                    }
                                }
                                forecastTotal['buyTotal'] += el.forecastBuyRateDaily
                                forecastTotal['sellTotal'] += el.forecastSellRateDaily
                                
                            }
                        })
                    }

                    fiscalDays ++ // number of working days in fiscal year 

                    // Number of working days in a Fiscal year month
                    if (data[0][key]){
                        data[0][key] ++
                    }else{
                        data[0][key] = 1
                    }
                }
                
                noOfDays ++ //Number of working days in a project
                
            }
        }
        //if project is Time base past Buy will be subtract and will divide same amoung remaining days
        if (proType ===2){
            totalRevenue = (billing.value - (actualTotal['sellTotal']??0))
        }else{ 
            revenuePerDay = (billing.value/noOfDays)
        }

        //for total column
        data[0]['total'] = fiscalDays 
        data[1]['total'] = billing.value //SELL TOTAL WITH IN A FISCAL YEAR
        data[2]['total'] = actualTotal['buyTotal'] + forecastTotal['buyTotal'] //BUY TOTAL WITH IN A FISCAL YEAR
        data[3]['total'] = data[1]['total'] - data[2]['total'] //CM
        data[4]['total'] = (( data[1]['total'] - data[2]['total'] ) / data[1]['total']) * 100 //CM%

        for (var iMonth = formatDate(fiscalYear['start']); iMonth.isSameOrBefore(fiscalYear['end']); iMonth.add(1, 'months')) {
            let key = formatDate(iMonth).format('MMM YY')
            let workDays = data[0][key]
            let value = 0
            let cos = 0

            if (proType === 2){
                let forecastRevenue = (totalRevenue - forecastStatement[key]?.['monthTotalSell']) < 0 ? totalRevenue :  forecastStatement[key]?.['monthTotalSell']
                value = actualStatement[key]?.['monthTotalSell'] ?? forecastRevenue
                totalRevenue -= value // subtract this month revenuePerDay form revmonth

            }else{
                value = (revenuePerDay * workDays)
            }

            if (!actualStatement[key] && forecastStatement[key]?.['monthTotalSell']> value){
                let sellpercent = (value / forecastStatement[key]?.['monthTotalSell']) * 100
                cos = (forecastStatement[key]?.['monthTotalBuy'] /100 )* sellpercent
            }else{
                
                let cos = actualStatement[key]?.['monthTotalBuy'] ?? forecastStatement[key]?.['monthTotalBuy']
            }
                
            let cm = value - cos
            
            data[1][key] = value  //revune
            data[2][key] = value ? cos : 0 //cos 
            data[3][key] = value ? cm: 0 //cm
            data[4][key] = value ? ((cm / value )*100): 0//cm percentage

        }
        //takeing avg of total cm%
        
        this.setState({data},()=>{
            this.Columns()

        })
    }
//==Forcasting count till Whole Financial year budget including Milestone and time base



//Forcasting count till Whole Financial year budget only for time base
 calculateProjectData = (actualStatement, actualTotal, forecast) =>{
        let { data, fiscalYear } = this.state
        const { billing, type: proType } = this.props
        let startDate = formatDate(billing.startDate)
        let endDate = formatDate(billing.endDate)
        let noOfDays = 0
        let actualDays = 0
        let fiscalDays = 0
        let revenuePerDay = 0
        let totalRevenue = 0
        let totalCost = 0
        let forecastStatement = {}
        let forecastTotal = {sellTotal: 0, buyTotal: 0}
        let tempEndDate = formatDate(new Date()).add(100, 'years')

        let forecastStartDate = startDate.isBefore(fiscalYear['start'], 'day') ? fiscalYear['start'] : startDate
        let forecastEndDate = endDate.isBefore(fiscalYear['end'], 'day') ? fiscalYear['end'] : endDate
        
        //Testing
        if (proType ===2){
            totalRevenue = (billing.value - (actualTotal['sellTotal']??0))
            totalCost = (billing.value - (actualTotal['buyTotal']??0))
        }

        for (var iDate = formatDate(startDate); iDate.isSameOrBefore(endDate); iDate.add(1, 'days')) {
            if (iDate.isoWeekday() !== 6 && iDate.isoWeekday() !== 7){
                let key = formatDate(iDate).format('MMM YY')

                if (iDate.isBefore(moment(), 'month')){ //checking if the date belongs to past month
                    actualDays ++ // Number of ACTUAL working days
                }
                
                if ( iDate.isSameOrAfter(forecastStartDate, 'day') && // finding Fiscal Months
                    iDate.isSameOrBefore(forecastEndDate), 'day' ) {
                    if (iDate.isSameOrAfter(moment(), 'month')){ 
                        //FORCASTING Future predictions
                        
                        forecast.forEach((el, index) =>{
                          
                            if ( iDate.isBetween(formatDate(el.con_startDate), formatDate(el.con_endDate) ??  tempEndDate, 'day', '[]') &&
                            iDate.isBetween(formatDate(el.res_startDate), formatDate(el.res_endDate)??  tempEndDate , 'day', '[]') ){
                                let sell = 0
                                let buy = 0
                                if (totalRevenue - el.forecastSellRateDaily > 0){
                                    sell = el.forecastSellRateDaily
                                    buy = (totalCost - el.forecastBuyRateDaily) < 0 ? totalCost : el.forecastBuyRateDaily
                                    totalRevenue -= el.forecastSellRateDaily
                                    totalCost -= (totalCost - el.forecastBuyRateDaily) < 0 ? totalCost : el.forecastBuyRateDaily
                                }else{
                                    sell = totalRevenue
                                    buy = (totalCost - el.forecastBuyRateDaily) < 0 ? totalCost : el.forecastBuyRateDaily
                                    totalRevenue = 0
                                    totalCost = 0
                                }


                                if (forecastStatement[key]){
                                    forecastStatement[key].monthTotalBuy +=  buy
                                    forecastStatement[key].monthTotalSell += sell

                                }else{
                                    forecastStatement[key] = {
                                        month: key, 
                                        monthTotalBuy: buy, 
                                        monthTotalSell: sell, 
                                    }
                                }
                                forecastTotal['buyTotal'] += buy
                                forecastTotal['sellTotal'] += sell

                            }
                        })
                    }

                    fiscalDays ++ // number of working days in fiscal year 

                    // Number of working days in a Fiscal year month
                    if (data[0][key]){
                        data[0][key] ++
                    }else{
                        data[0][key] = 1
                    }
                }
                
                noOfDays ++ //Number of working days in a project
                
            }
        }
        //if project is Time base past Buy will be subtract and will divide same amoung remaining days
    
        //for total column
        data[0]['total'] = fiscalDays 
        data[1]['total'] = actualTotal['sellTotal'] + forecastTotal['sellTotal'] //SELL TOTAL WITH IN A FISCAL YEAR
        data[2]['total'] = actualTotal['buyTotal'] + forecastTotal['buyTotal'] //BUY TOTAL WITH IN A FISCAL YEAR
        data[3]['total'] = data[1]['total'] - data[2]['total'] //CM
        data[4]['total'] = (( data[1]['total'] - data[2]['total'] ) / data[1]['total']) * 100 //CM%

        for (var iMonth = formatDate(fiscalYear['start']); iMonth.isSameOrBefore(fiscalYear['end']); iMonth.add(1, 'months')) {
            let key = formatDate(iMonth).format('MMM YY')
            let workDays = data[0][key]
            let value = 0

            if (proType === 2){
                // let forecastRevenue = (totalRevenue - forecastStatement[key]?.['monthTotalSell']) < 0 ? totalRevenue :  forecastStatement[key]?.['monthTotalSell']
                // value = actualStatement[key]?.['monthTotalSell'] ?? forecastRevenue
                value = actualStatement[key]?.['monthTotalSell'] ?? forecastStatement[key]?.['monthTotalSell']
                // totalRevenue -= value // subtract this month revenuePerDay form revmonth

            }else{
                value = (revenuePerDay * workDays)
            }

            let cos = actualStatement[key]?.['monthTotalBuy'] ?? forecastStatement[key]?.['monthTotalBuy']
                
            let cm = value - cos
            
            data[1][key] = value  //revune
            data[2][key] = value ? cos : 0 //cos 
            data[3][key] = value ? cm: 0 //cm
            data[4][key] = value ? ((cm / value )*100): 0//cm percentage
            
        }
        //takeing avg of total cm%
        
        this.setState({data},()=>{
            this.Columns()

        })
    }
//==Forcasting count till Whole Financial year budget including Milestone and time base